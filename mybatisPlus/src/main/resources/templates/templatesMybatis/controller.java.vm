package $!{package.Controller};

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.github.pagehelper.PageHelper;
import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;
import com.test.dbhappy.gen.BaseController;
import com.test.dbhappy.gen.PageDomain;
import com.test.dbhappy.gen.R;
import com.test.dbhappy.gen.TableDataInfo;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.validation.Valid;
import java.util.List;
import java.util.Objects;

import $!{package.Service}.$!{table.serviceName};
import $!{package.Entity}.$!{table.entityName};

#if(${superControllerClassPackage})
import $!{superControllerClassPackage};
#end

/**
 *
 *  $!{table.comment} 前端控制器
 *
 * @author: $!{author}
 * @date: $!{date}
 */
@RestController
@RequestMapping({"#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end"})
#if(${kotlin})
class $!{table.controllerName}#if(${superControllerClass}) : $!{superControllerClass}()#end

#else
@Api(tags = "$!{table.comment}管理")
    #if(${superControllerClass})
    public class $!{table.controllerName} extends $!{superControllerClass} {
    #else
    public class $!{table.controllerName} {
    #end

    @Resource
    private $!{table.serviceName} service;

    @GetMapping({"list"})
    @ApiOperationSupport(order = 1)
    @ApiOperation(value = "根据实体属性分页查询")
    public R<TableDataInfo<$!{table.entityName}>> list($!{table.entityName} entity,PageDomain pageDomain) {
        PageHelper.startPage(CheckPageDomain(pageDomain));
        QueryWrapper<$!{table.entityName}> qw = new QueryWrapper<$!{table.entityName}>();
        qw.setEntity(entity)#foreach($field in ${table.fields})#if(${field.keyFlag}).orderByAsc("$!{field.name}");#end#end

        return R.ok(getDataTable(service.list(qw)));
    }

    @GetMapping({"getOne"})
    @ApiOperationSupport(order = 2)
    @ApiOperation(value = "根据实体id获取详情")
    public R<User> getOne($!{table.entityName} entity) {
        QueryWrapper queryWrapper = new QueryWrapper<>(entity);
        return R.ok(service.getOne(queryWrapper));
    }

    @PostMapping({"save"})
    @ApiOperationSupport(order = 3)
    @ApiOperation(value = "新增保存实体")
    public R save(@RequestBody @Valid $!{table.entityName} entity) {
        return R.ok(service.save(entity));
    }

    @PostMapping({"update"})
    @ApiOperationSupport(order = 4)
    @ApiOperation(value = "更新实体")
    public R update(@RequestBody $!{table.entityName} entity) {
        #foreach($entity in ${table.fields})
        #if(${entity.keyFlag})##生成主键排在第一位
        #set($getId = "entity.get" + $entity.propertyName.substring(0, 1).toUpperCase() + $entity.propertyName.substring(1) + "()")
if(Objects.isNull($getId)){
            return R.fail("参数为空!");
        }
        Object result = service.getById($getId);
        #end#end
        if(Objects.nonNull(result)) {
            return R.ok(service.updateById(entity));
        } else {
            return R.fail("数据不存在!");
        }
    }

    @PostMapping({"batch-update"})
    @ApiOperationSupport(order = 5)
    @ApiOperation(value = "批量更新实体")
    public R batchUpdate(@RequestBody List<$!{table.entityName}> entityList) {
        if(CollectionUtils.isEmpty(entityList)) return R.fail("参数为空");
        return R.ok(service.batchUpdate(entityList));
    }

    @PostMapping({"batch-insert"})
    @ApiOperationSupport(order = 6)
    @ApiOperation(value = "批量保存实体")
    public R batchInsert(@RequestBody List<$!{table.entityName}> entityList) {
        if(CollectionUtils.isEmpty(entityList)) return R.fail("参数为空");
        return R.ok(service.batchInsert(entityList));
    }

    @DeleteMapping({"remove/{id}"})
    @ApiOperationSupport(order = 7)
    @ApiOperation(value = " 删除实体")
    public R remove(@PathVariable("id") int id) {
        Object entity = service.getById(id);
        if(Objects.nonNull(entity)) {
            return R.ok(service.removeById(id));
        } else {
            return R.fail("数据不存在!");
        }
    }
}
#end